{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__notEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__upkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "Winner__Picked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x17f09377254f811af6dcd3f700ec2dc959b5fa4275275d1b26b55936f334fa61",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1203518",
    "logsBloom": "0x
    "blockHash": "0x6b1ab09aa45bf97bb0103ad91aedce410c342799456f4f726d0cd53a71226d3f",
    "transactionHash": "0x17f09377254f811af6dcd3f700ec2dc959b5fa4275275d1b26b55936f334fa61",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1203518",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "2a8c1f30299debee549b1a79bbb0a3ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__notEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__upkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"Winner__Picked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Raffle__notEnoughEthEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__upkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type Declarations */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    \\n    /* state variables */\\n\\n    //immutable types are cheaper on gas\\n    address payable[] private s_players;\\n    uint256 private immutable i_entranceFee;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    /* Lottery variables*/\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimestamp;\\n    uint256 private immutable i_interval;\\n    /* Events */\\n\\n    event RaffleEnter(address indexed player);\\n    event RequestRaffleWinner(uint256 indexed requestId);\\n    event Winner__Picked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2, //contract address\\n        uint256 entranceFee, \\n        bytes32 gasLane,\\n        uint64  subscriptionId,\\n        uint32  callbackGasLimit,\\n        uint256 interval \\n    ) VRFConsumerBaseV2(vrfCoordinatorV2){\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimestamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable{\\n        if(msg.value < i_entranceFee){\\n            revert Raffle__notEnoughEthEntered();\\n        }\\n        if(s_raffleState != RaffleState.OPEN){\\n            revert Raffle__NotOpen();\\n        }\\n\\n        s_players.push(payable(msg.sender));\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    //will be called by the chainlink keepers network.\\n    //external keyword makes our function inaccsesible to our contract...\\n    //... therefore making it cheaper.\\n\\n    function checkUpkeep(\\n        bytes memory /*performData */\\n    )     \\n        public \\n        override \\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performdata*/\\n        )\\n    {\\n            bool isOpen = (RaffleState.OPEN == s_raffleState);\\n            bool timepassed = ((block.timestamp - s_lastTimestamp)   > i_interval);\\n            bool hasPlayer = (s_players.length > 0);\\n            bool hasBalance = address(this).balance > 0;\\n            upkeepNeeded = (isOpen && timepassed && hasPlayer && hasBalance);\\n    }\\n\\n    function performUpkeep(bytes calldata /*performdata*/) external override{\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if(!upkeepNeeded){\\n            revert Raffle__upkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length, \\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\\n\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimestamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if(!success){\\n            revert Raffle__TransferFailed();\\n        }\\n        emit Winner__Picked(recentWinner);\\n    }\\n\\n    /* view/pure funtions */\\n    function getRaffleState() public view returns (RaffleState){\\n        return s_raffleState;\\n    }\\n    \\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address){\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view  returns(uint256) {\\n        return s_players.length;\\n    }\\n    \\n    function getLatestTimestamp() public view returns(uint256) {\\n        return s_lastTimestamp;\\n    }\\n\\n    function getRequestConfirmation() public pure returns(uint256){\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n    \\n\\n}   \",\"keccak256\":\"0xc9cd039ab5e90762675822a6c600a68ff3b311372648cc20fb24fcb1c427fde7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200180238038062001802833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611433620003cf6000396000818161081701526108850152600061069b01526000610678015260006106570152600061061b0152600081816102fa01526103f7015260008181610337015261038b01526114336000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b41461024a578063ca6a9ef814610275578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b8063473f1ddc146101b657806353a2c19a146101e15780636e04ff0d1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063460e204914610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bbd565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c4f565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e03565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610eba565b610564565b005b34801561018557600080fd5b506101a0600480360381019061019b9190610f07565b610754565b6040516101ad9190610f75565b60405180910390f35b3480156101c257600080fd5b506101cb61079b565b6040516101d89190610f75565b60405180910390f35b3480156101ed57600080fd5b506101f66107c5565b6040516102039190610bbd565b60405180910390f35b34801561021857600080fd5b50610233600480360381019061022e9190611045565b6107d4565b604051610241929190611128565b60405180910390f35b34801561025657600080fd5b5061025f610881565b60405161026c9190610bbd565b60405180910390f35b34801561028157600080fd5b5061028a6108a9565b6040516102979190610bbd565b60405180910390f35b3480156102ac57600080fd5b506102b56108b6565b6040516102c29190610bbd565b60405180910390f35b3480156102d757600080fd5b506102e06108c0565b6040516102ed9190610bbd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611158565b60405180910390fd5b6103f182826108cc565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fa9ea942c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610bd8565b5b600160149054906101000a900460ff16600181111561048557610484610bd8565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e604051806020016040528060008152506107d4565b509050806105ed5747600080549050600160149054906101000a900460ff1660018111156105af576105ae610bd8565b5b6040517f837325cd0000000000000000000000000000000000000000000000000000000081526004016105e493929190611181565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561061257610611610bd8565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dc959493929190611230565b6020604051808303816000875af11580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190611298565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000808281548110610769576107686112c5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107fc576107fb610bd8565b5b600060018111156108105761080f610bd8565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108449190611323565b119050600080600080549050119050600080471190508380156108645750825b801561086d5750815b80156108765750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b6000600254905090565b60008080549050905090565b60008080549050826000815181106108e7576108e66112c5565b5b60200260200101516108f99190611386565b905060008082815481106109105761090f6112c5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109a4576109a3610bd8565b5b0217905550600067ffffffffffffffff8111156109c4576109c3610cc0565b5b6040519080825280602002602001820160405280156109f25781602001602082028036833780820191505090505b5060009080519060200190610a08929190610afd565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a36906113e8565b60006040518083038185875af1925050503d8060008114610a73576040519150601f19603f3d011682016040523d82523d6000602084013e610a78565b606091505b5050905080610ab3576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f11158292a6a602a5ac0816d4998c616e504fa50eb77889661c97714a31f71b1560405160405180910390a25050505050565b828054828255906000526020600020908101928215610b76579160200282015b82811115610b755782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1d565b5b509050610b839190610b87565b5090565b5b80821115610ba0576000816000905550600101610b88565b5090565b6000819050919050565b610bb781610ba4565b82525050565b6000602082019050610bd26000830184610bae565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c1857610c17610bd8565b5b50565b6000819050610c2982610c07565b919050565b6000610c3982610c1b565b9050919050565b610c4981610c2e565b82525050565b6000602082019050610c646000830184610c40565b92915050565b6000604051905090565b600080fd5b600080fd5b610c8781610ba4565b8114610c9257600080fd5b50565b600081359050610ca481610c7e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cf882610caf565b810181811067ffffffffffffffff82111715610d1757610d16610cc0565b5b80604052505050565b6000610d2a610c6a565b9050610d368282610cef565b919050565b600067ffffffffffffffff821115610d5657610d55610cc0565b5b602082029050602081019050919050565b600080fd5b6000610d7f610d7a84610d3b565b610d20565b90508083825260208201905060208402830185811115610da257610da1610d67565b5b835b81811015610dcb5780610db78882610c95565b845260208401935050602081019050610da4565b5050509392505050565b600082601f830112610dea57610de9610caa565b5b8135610dfa848260208601610d6c565b91505092915050565b60008060408385031215610e1a57610e19610c74565b5b6000610e2885828601610c95565b925050602083013567ffffffffffffffff811115610e4957610e48610c79565b5b610e5585828601610dd5565b9150509250929050565b600080fd5b60008083601f840112610e7a57610e79610caa565b5b8235905067ffffffffffffffff811115610e9757610e96610e5f565b5b602083019150836001820283011115610eb357610eb2610d67565b5b9250929050565b60008060208385031215610ed157610ed0610c74565b5b600083013567ffffffffffffffff811115610eef57610eee610c79565b5b610efb85828601610e64565b92509250509250929050565b600060208284031215610f1d57610f1c610c74565b5b6000610f2b84828501610c95565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f5f82610f34565b9050919050565b610f6f81610f54565b82525050565b6000602082019050610f8a6000830184610f66565b92915050565b600080fd5b600067ffffffffffffffff821115610fb057610faf610cc0565b5b610fb982610caf565b9050602081019050919050565b82818337600083830152505050565b6000610fe8610fe384610f95565b610d20565b90508281526020810184848401111561100457611003610f90565b5b61100f848285610fc6565b509392505050565b600082601f83011261102c5761102b610caa565b5b813561103c848260208601610fd5565b91505092915050565b60006020828403121561105b5761105a610c74565b5b600082013567ffffffffffffffff81111561107957611078610c79565b5b61108584828501611017565b91505092915050565b60008115159050919050565b6110a38161108e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110e35780820151818401526020810190506110c8565b60008484015250505050565b60006110fa826110a9565b61110481856110b4565b93506111148185602086016110c5565b61111d81610caf565b840191505092915050565b600060408201905061113d600083018561109a565b818103602083015261114f81846110ef565b90509392505050565b600060408201905061116d6000830185610f66565b61117a6020830184610f66565b9392505050565b60006060820190506111966000830186610bae565b6111a36020830185610bae565b6111b06040830184610bae565b949350505050565b6000819050919050565b6111cb816111b8565b82525050565b600067ffffffffffffffff82169050919050565b6111ee816111d1565b82525050565b600061ffff82169050919050565b61120b816111f4565b82525050565b600063ffffffff82169050919050565b61122a81611211565b82525050565b600060a08201905061124560008301886111c2565b61125260208301876111e5565b61125f6040830186611202565b61126c6060830185611221565b6112796080830184611221565b9695505050505050565b60008151905061129281610c7e565b92915050565b6000602082840312156112ae576112ad610c74565b5b60006112bc84828501611283565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132e82610ba4565b915061133983610ba4565b9250828203905081811115611351576113506112f4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139182610ba4565b915061139c83610ba4565b9250826113ac576113ab611357565b5b828206905092915050565b600081905092915050565b50565b60006113d26000836113b7565b91506113dd826113c2565b600082019050919050565b60006113f3826113c5565b915081905091905056fea264697066735822122029ed3d884507045aba38adf8c266990761a0e42abfbf1deb3fe34a4c6af765f064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b41461024a578063ca6a9ef814610275578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b8063473f1ddc146101b657806353a2c19a146101e15780636e04ff0d1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063460e204914610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bbd565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c4f565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e03565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610eba565b610564565b005b34801561018557600080fd5b506101a0600480360381019061019b9190610f07565b610754565b6040516101ad9190610f75565b60405180910390f35b3480156101c257600080fd5b506101cb61079b565b6040516101d89190610f75565b60405180910390f35b3480156101ed57600080fd5b506101f66107c5565b6040516102039190610bbd565b60405180910390f35b34801561021857600080fd5b50610233600480360381019061022e9190611045565b6107d4565b604051610241929190611128565b60405180910390f35b34801561025657600080fd5b5061025f610881565b60405161026c9190610bbd565b60405180910390f35b34801561028157600080fd5b5061028a6108a9565b6040516102979190610bbd565b60405180910390f35b3480156102ac57600080fd5b506102b56108b6565b6040516102c29190610bbd565b60405180910390f35b3480156102d757600080fd5b506102e06108c0565b6040516102ed9190610bbd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611158565b60405180910390fd5b6103f182826108cc565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fa9ea942c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610bd8565b5b600160149054906101000a900460ff16600181111561048557610484610bd8565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e604051806020016040528060008152506107d4565b509050806105ed5747600080549050600160149054906101000a900460ff1660018111156105af576105ae610bd8565b5b6040517f837325cd0000000000000000000000000000000000000000000000000000000081526004016105e493929190611181565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561061257610611610bd8565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dc959493929190611230565b6020604051808303816000875af11580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190611298565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000808281548110610769576107686112c5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107fc576107fb610bd8565b5b600060018111156108105761080f610bd8565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108449190611323565b119050600080600080549050119050600080471190508380156108645750825b801561086d5750815b80156108765750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b6000600254905090565b60008080549050905090565b60008080549050826000815181106108e7576108e66112c5565b5b60200260200101516108f99190611386565b905060008082815481106109105761090f6112c5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109a4576109a3610bd8565b5b0217905550600067ffffffffffffffff8111156109c4576109c3610cc0565b5b6040519080825280602002602001820160405280156109f25781602001602082028036833780820191505090505b5060009080519060200190610a08929190610afd565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a36906113e8565b60006040518083038185875af1925050503d8060008114610a73576040519150601f19603f3d011682016040523d82523d6000602084013e610a78565b606091505b5050905080610ab3576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f11158292a6a602a5ac0816d4998c616e504fa50eb77889661c97714a31f71b1560405160405180910390a25050505050565b828054828255906000526020600020908101928215610b76579160200282015b82811115610b755782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1d565b5b509050610b839190610b87565b5090565b5b80821115610ba0576000816000905550600101610b88565b5090565b6000819050919050565b610bb781610ba4565b82525050565b6000602082019050610bd26000830184610bae565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c1857610c17610bd8565b5b50565b6000819050610c2982610c07565b919050565b6000610c3982610c1b565b9050919050565b610c4981610c2e565b82525050565b6000602082019050610c646000830184610c40565b92915050565b6000604051905090565b600080fd5b600080fd5b610c8781610ba4565b8114610c9257600080fd5b50565b600081359050610ca481610c7e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cf882610caf565b810181811067ffffffffffffffff82111715610d1757610d16610cc0565b5b80604052505050565b6000610d2a610c6a565b9050610d368282610cef565b919050565b600067ffffffffffffffff821115610d5657610d55610cc0565b5b602082029050602081019050919050565b600080fd5b6000610d7f610d7a84610d3b565b610d20565b90508083825260208201905060208402830185811115610da257610da1610d67565b5b835b81811015610dcb5780610db78882610c95565b845260208401935050602081019050610da4565b5050509392505050565b600082601f830112610dea57610de9610caa565b5b8135610dfa848260208601610d6c565b91505092915050565b60008060408385031215610e1a57610e19610c74565b5b6000610e2885828601610c95565b925050602083013567ffffffffffffffff811115610e4957610e48610c79565b5b610e5585828601610dd5565b9150509250929050565b600080fd5b60008083601f840112610e7a57610e79610caa565b5b8235905067ffffffffffffffff811115610e9757610e96610e5f565b5b602083019150836001820283011115610eb357610eb2610d67565b5b9250929050565b60008060208385031215610ed157610ed0610c74565b5b600083013567ffffffffffffffff811115610eef57610eee610c79565b5b610efb85828601610e64565b92509250509250929050565b600060208284031215610f1d57610f1c610c74565b5b6000610f2b84828501610c95565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f5f82610f34565b9050919050565b610f6f81610f54565b82525050565b6000602082019050610f8a6000830184610f66565b92915050565b600080fd5b600067ffffffffffffffff821115610fb057610faf610cc0565b5b610fb982610caf565b9050602081019050919050565b82818337600083830152505050565b6000610fe8610fe384610f95565b610d20565b90508281526020810184848401111561100457611003610f90565b5b61100f848285610fc6565b509392505050565b600082601f83011261102c5761102b610caa565b5b813561103c848260208601610fd5565b91505092915050565b60006020828403121561105b5761105a610c74565b5b600082013567ffffffffffffffff81111561107957611078610c79565b5b61108584828501611017565b91505092915050565b60008115159050919050565b6110a38161108e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110e35780820151818401526020810190506110c8565b60008484015250505050565b60006110fa826110a9565b61110481856110b4565b93506111148185602086016110c5565b61111d81610caf565b840191505092915050565b600060408201905061113d600083018561109a565b818103602083015261114f81846110ef565b90509392505050565b600060408201905061116d6000830185610f66565b61117a6020830184610f66565b9392505050565b60006060820190506111966000830186610bae565b6111a36020830185610bae565b6111b06040830184610bae565b949350505050565b6000819050919050565b6111cb816111b8565b82525050565b600067ffffffffffffffff82169050919050565b6111ee816111d1565b82525050565b600061ffff82169050919050565b61120b816111f4565b82525050565b600063ffffffff82169050919050565b61122a81611211565b82525050565b600060a08201905061124560008301886111c2565b61125260208301876111e5565b61125f6040830186611202565b61126c6060830185611221565b6112796080830184611221565b9695505050505050565b60008151905061129281610c7e565b92915050565b6000602082840312156112ae576112ad610c74565b5b60006112bc84828501611283565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132e82610ba4565b915061133983610ba4565b9250828203905081811115611351576113506112f4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139182610ba4565b915061139c83610ba4565b9250826113ac576113ab611357565b5b828206905092915050565b600081905092915050565b50565b60006113d26000836113b7565b91506113dd826113c2565b600082019050919050565b60006113f3826113c5565b915081905091905056fea264697066735822122029ed3d884507045aba38adf8c266990761a0e42abfbf1deb3fe34a4c6af765f064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1159,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1178,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1181,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)1156"
      },
      {
        "astId": 1183,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1156": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}